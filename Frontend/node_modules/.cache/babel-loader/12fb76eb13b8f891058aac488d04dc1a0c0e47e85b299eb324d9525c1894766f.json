{"ast":null,"code":"const API_URL = \"http://127.0.0.1:8000/api\"; // Adjust this to match your Django API base URL\n\n// Function to get the authentication token from localStorage\nconst getAuthToken = () => {\n  return localStorage.getItem(\"accessToken\"); // Retrieves stored token\n};\n\n// Function to fetch items (used in React component)\nexport const fetchItems = async () => {\n  try {\n    const token = getAuthToken();\n    if (!token) {\n      throw new Error(\"No access token found. Please log in.\");\n    }\n    const response = await fetch(`${API_URL}/items/`, {\n      method: \"GET\",\n      headers: {\n        \"Authorization\": `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Error: ${response.status} ${response.statusText}`);\n    }\n    return await response.json(); // Returns the JSON response\n  } catch (error) {\n    console.error(\"Failed to fetch items:\", error);\n    return null;\n  }\n};\n\n// Function to handle user login and store the token\nexport const login = async (username, password) => {\n  try {\n    const response = await fetch(`${API_URL}/token/`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    if (response.ok) {\n      const data = await response.json();\n      localStorage.setItem(\"accessToken\", data.access); // Store token\n      console.log(\"Login successful!\");\n      return true;\n    } else {\n      console.error(\"Login failed:\", response.statusText);\n      return false;\n    }\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    return false;\n  }\n};","map":{"version":3,"names":["API_URL","getAuthToken","localStorage","getItem","fetchItems","token","Error","response","fetch","method","headers","ok","status","statusText","json","error","console","login","username","password","body","JSON","stringify","data","setItem","access","log"],"sources":["C:/Users/Ninja/ECIMS/frontend/src/api.js"],"sourcesContent":["const API_URL = \"http://127.0.0.1:8000/api\"; // Adjust this to match your Django API base URL\r\n\r\n// Function to get the authentication token from localStorage\r\nconst getAuthToken = () => {\r\n    return localStorage.getItem(\"accessToken\"); // Retrieves stored token\r\n};\r\n\r\n// Function to fetch items (used in React component)\r\nexport const fetchItems = async () => {\r\n    try {\r\n        const token = getAuthToken();\r\n        if (!token) {\r\n            throw new Error(\"No access token found. Please log in.\");\r\n        }\r\n\r\n        const response = await fetch(`${API_URL}/items/`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Authorization\": `Bearer ${token}`,\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Error: ${response.status} ${response.statusText}`);\r\n        }\r\n\r\n        return await response.json(); // Returns the JSON response\r\n    } catch (error) {\r\n        console.error(\"Failed to fetch items:\", error);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Function to handle user login and store the token\r\nexport const login = async (username, password) => {\r\n    try {\r\n        const response = await fetch(`${API_URL}/token/`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({ username, password })\r\n        });\r\n\r\n        if (response.ok) {\r\n            const data = await response.json();\r\n            localStorage.setItem(\"accessToken\", data.access); // Store token\r\n            console.log(\"Login successful!\");\r\n            return true;\r\n        } else {\r\n            console.error(\"Login failed:\", response.statusText);\r\n            return false;\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Login error:\", error);\r\n        return false;\r\n    }\r\n};\r\n\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,2BAA2B,CAAC,CAAC;;AAE7C;AACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACvB,OAAOC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;AAChD,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACA,MAAMC,KAAK,GAAGJ,YAAY,CAAC,CAAC;IAC5B,IAAI,CAACI,KAAK,EAAE;MACR,MAAM,IAAIC,KAAK,CAAC,uCAAuC,CAAC;IAC5D;IAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,SAAS,EAAE;MAC9CS,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,eAAe,EAAE,UAAUL,KAAK,EAAE;QAClC,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IAEF,IAAI,CAACE,QAAQ,CAACI,EAAE,EAAE;MACd,MAAM,IAAIL,KAAK,CAAC,UAAUC,QAAQ,CAACK,MAAM,IAAIL,QAAQ,CAACM,UAAU,EAAE,CAAC;IACvE;IAEA,OAAO,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC,CAAC,CAAC;EAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,IAAI;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;EAC/C,IAAI;IACA,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,SAAS,EAAE;MAC9CS,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEJ,QAAQ;QAAEC;MAAS,CAAC;IAC/C,CAAC,CAAC;IAEF,IAAIZ,QAAQ,CAACI,EAAE,EAAE;MACb,MAAMY,IAAI,GAAG,MAAMhB,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClCZ,YAAY,CAACsB,OAAO,CAAC,aAAa,EAAED,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC;MAClDT,OAAO,CAACU,GAAG,CAAC,mBAAmB,CAAC;MAChC,OAAO,IAAI;IACf,CAAC,MAAM;MACHV,OAAO,CAACD,KAAK,CAAC,eAAe,EAAER,QAAQ,CAACM,UAAU,CAAC;MACnD,OAAO,KAAK;IAChB;EACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,OAAO,KAAK;EAChB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}